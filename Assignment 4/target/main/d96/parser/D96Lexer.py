# Generated from main/d96/parser/D96.g4 by ANTLR 4.10.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


from lexererr import *


def serializedATN():
    return [
        4,0,63,573,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,
        58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,
        65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,
        71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,1,0,1,0,3,0,
        158,8,0,1,0,5,0,161,8,0,10,0,12,0,164,9,0,1,1,1,1,1,1,3,1,169,8,
        1,1,1,5,1,172,8,1,10,1,12,1,175,9,1,1,2,1,2,1,2,1,2,3,2,181,8,2,
        1,2,5,2,184,8,2,10,2,12,2,187,9,2,1,3,1,3,1,3,1,3,3,3,193,8,3,1,
        3,5,3,196,8,3,10,3,12,3,199,9,3,1,4,1,4,1,4,3,4,204,8,4,1,5,1,5,
        1,5,1,6,1,6,1,6,1,7,1,7,1,7,3,7,215,8,7,1,8,1,8,1,9,1,9,3,9,221,
        8,9,1,9,5,9,224,8,9,10,9,12,9,227,9,9,1,9,3,9,230,8,9,1,10,1,10,
        5,10,234,8,10,10,10,12,10,237,9,10,1,11,1,11,3,11,241,8,11,1,11,
        4,11,244,8,11,11,11,12,11,245,1,12,1,12,1,12,1,12,5,12,252,8,12,
        10,12,12,12,255,9,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,
        1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,
        1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,
        1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,
        1,20,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,22,1,22,1,22,
        1,22,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,24,1,24,
        1,25,1,25,1,25,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,28,1,28,1,28,
        1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,
        1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,30,1,31,
        1,31,1,31,1,31,1,31,1,31,1,32,1,32,1,32,1,32,1,32,1,32,1,33,1,33,
        1,33,1,33,1,34,1,34,1,34,1,34,1,34,1,34,1,35,1,35,1,35,1,35,1,35,
        1,35,1,35,1,35,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,37,1,37,1,37,
        1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,3,37,
        421,8,37,1,38,1,38,1,38,1,38,3,38,427,8,38,1,38,1,38,1,39,1,39,5,
        39,433,8,39,10,39,12,39,436,9,39,1,39,1,39,1,39,1,40,1,40,3,40,443,
        8,40,1,41,1,41,1,41,3,41,448,8,41,1,41,1,41,1,41,1,41,1,41,1,41,
        3,41,456,8,41,1,41,1,41,1,42,1,42,1,43,1,43,1,44,1,44,1,45,1,45,
        1,46,1,46,1,47,1,47,1,48,1,48,1,48,1,49,1,49,1,49,1,50,1,50,1,50,
        1,51,1,51,1,52,1,52,1,52,1,53,1,53,1,54,1,54,1,54,1,55,1,55,1,56,
        1,56,1,56,1,57,1,57,1,57,1,57,1,58,1,58,1,58,1,59,1,59,1,60,1,60,
        1,61,1,61,1,62,1,62,1,63,1,63,1,64,1,64,1,64,1,65,1,65,1,66,1,66,
        1,67,1,67,1,68,1,68,1,68,1,69,1,69,1,70,1,70,1,71,1,71,5,71,531,
        8,71,10,71,12,71,534,9,71,1,72,1,72,4,72,538,8,72,11,72,12,72,539,
        1,73,4,73,543,8,73,11,73,12,73,544,1,73,1,73,1,74,1,74,5,74,551,
        8,74,10,74,12,74,554,9,74,1,74,3,74,557,8,74,1,74,1,74,1,75,1,75,
        5,75,563,8,75,10,75,12,75,566,9,75,1,75,1,75,1,75,1,76,1,76,1,76,
        1,253,0,77,1,0,3,0,5,0,7,0,9,0,11,0,13,0,15,0,17,0,19,0,21,0,23,
        0,25,1,27,2,29,3,31,4,33,5,35,6,37,7,39,0,41,0,43,8,45,9,47,10,49,
        11,51,12,53,13,55,14,57,15,59,16,61,17,63,18,65,19,67,20,69,21,71,
        22,73,23,75,24,77,25,79,26,81,27,83,28,85,29,87,30,89,31,91,32,93,
        33,95,34,97,35,99,36,101,37,103,38,105,39,107,40,109,41,111,42,113,
        43,115,44,117,45,119,46,121,47,123,48,125,49,127,50,129,51,131,52,
        133,53,135,54,137,55,139,56,141,57,143,58,145,59,147,60,149,61,151,
        62,153,63,1,0,18,1,0,49,57,1,0,48,57,1,0,49,55,1,0,48,55,2,0,66,
        66,98,98,1,0,49,49,1,0,48,49,2,0,88,88,120,120,2,0,49,57,65,70,2,
        0,48,57,65,70,4,0,8,10,12,13,34,34,92,92,7,0,39,39,92,92,98,98,102,
        102,110,110,114,114,116,116,2,0,43,43,45,45,2,0,69,69,101,101,3,
        0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,3,0,9,10,12,13,
        32,32,4,1,8,10,12,13,34,34,92,92,594,0,25,1,0,0,0,0,27,1,0,0,0,0,
        29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,
        43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,
        53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,
        63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,
        73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,
        83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,
        93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,
        0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,1,
        0,0,0,0,113,1,0,0,0,0,115,1,0,0,0,0,117,1,0,0,0,0,119,1,0,0,0,0,
        121,1,0,0,0,0,123,1,0,0,0,0,125,1,0,0,0,0,127,1,0,0,0,0,129,1,0,
        0,0,0,131,1,0,0,0,0,133,1,0,0,0,0,135,1,0,0,0,0,137,1,0,0,0,0,139,
        1,0,0,0,0,141,1,0,0,0,0,143,1,0,0,0,0,145,1,0,0,0,0,147,1,0,0,0,
        0,149,1,0,0,0,0,151,1,0,0,0,0,153,1,0,0,0,1,155,1,0,0,0,3,165,1,
        0,0,0,5,176,1,0,0,0,7,188,1,0,0,0,9,203,1,0,0,0,11,205,1,0,0,0,13,
        208,1,0,0,0,15,214,1,0,0,0,17,216,1,0,0,0,19,229,1,0,0,0,21,231,
        1,0,0,0,23,238,1,0,0,0,25,247,1,0,0,0,27,261,1,0,0,0,29,267,1,0,
        0,0,31,276,1,0,0,0,33,279,1,0,0,0,35,286,1,0,0,0,37,291,1,0,0,0,
        39,299,1,0,0,0,41,304,1,0,0,0,43,310,1,0,0,0,45,314,1,0,0,0,47,318,
        1,0,0,0,49,323,1,0,0,0,51,330,1,0,0,0,53,333,1,0,0,0,55,336,1,0,
        0,0,57,340,1,0,0,0,59,352,1,0,0,0,61,363,1,0,0,0,63,368,1,0,0,0,
        65,374,1,0,0,0,67,380,1,0,0,0,69,384,1,0,0,0,71,390,1,0,0,0,73,398,
        1,0,0,0,75,420,1,0,0,0,77,426,1,0,0,0,79,430,1,0,0,0,81,442,1,0,
        0,0,83,455,1,0,0,0,85,459,1,0,0,0,87,461,1,0,0,0,89,463,1,0,0,0,
        91,465,1,0,0,0,93,467,1,0,0,0,95,469,1,0,0,0,97,471,1,0,0,0,99,474,
        1,0,0,0,101,477,1,0,0,0,103,480,1,0,0,0,105,482,1,0,0,0,107,485,
        1,0,0,0,109,487,1,0,0,0,111,490,1,0,0,0,113,492,1,0,0,0,115,495,
        1,0,0,0,117,499,1,0,0,0,119,502,1,0,0,0,121,504,1,0,0,0,123,506,
        1,0,0,0,125,508,1,0,0,0,127,510,1,0,0,0,129,512,1,0,0,0,131,515,
        1,0,0,0,133,517,1,0,0,0,135,519,1,0,0,0,137,521,1,0,0,0,139,524,
        1,0,0,0,141,526,1,0,0,0,143,528,1,0,0,0,145,535,1,0,0,0,147,542,
        1,0,0,0,149,548,1,0,0,0,151,560,1,0,0,0,153,570,1,0,0,0,155,162,
        7,0,0,0,156,158,5,95,0,0,157,156,1,0,0,0,157,158,1,0,0,0,158,159,
        1,0,0,0,159,161,7,1,0,0,160,157,1,0,0,0,161,164,1,0,0,0,162,160,
        1,0,0,0,162,163,1,0,0,0,163,2,1,0,0,0,164,162,1,0,0,0,165,166,5,
        48,0,0,166,173,7,2,0,0,167,169,5,95,0,0,168,167,1,0,0,0,168,169,
        1,0,0,0,169,170,1,0,0,0,170,172,7,3,0,0,171,168,1,0,0,0,172,175,
        1,0,0,0,173,171,1,0,0,0,173,174,1,0,0,0,174,4,1,0,0,0,175,173,1,
        0,0,0,176,177,5,48,0,0,177,178,7,4,0,0,178,185,7,5,0,0,179,181,5,
        95,0,0,180,179,1,0,0,0,180,181,1,0,0,0,181,182,1,0,0,0,182,184,7,
        6,0,0,183,180,1,0,0,0,184,187,1,0,0,0,185,183,1,0,0,0,185,186,1,
        0,0,0,186,6,1,0,0,0,187,185,1,0,0,0,188,189,5,48,0,0,189,190,7,7,
        0,0,190,197,7,8,0,0,191,193,5,95,0,0,192,191,1,0,0,0,192,193,1,0,
        0,0,193,194,1,0,0,0,194,196,7,9,0,0,195,192,1,0,0,0,196,199,1,0,
        0,0,197,195,1,0,0,0,197,198,1,0,0,0,198,8,1,0,0,0,199,197,1,0,0,
        0,200,204,8,10,0,0,201,204,3,11,5,0,202,204,3,13,6,0,203,200,1,0,
        0,0,203,201,1,0,0,0,203,202,1,0,0,0,204,10,1,0,0,0,205,206,5,92,
        0,0,206,207,7,11,0,0,207,12,1,0,0,0,208,209,5,39,0,0,209,210,5,34,
        0,0,210,14,1,0,0,0,211,212,5,92,0,0,212,215,8,11,0,0,213,215,5,92,
        0,0,214,211,1,0,0,0,214,213,1,0,0,0,215,16,1,0,0,0,216,217,7,12,
        0,0,217,18,1,0,0,0,218,225,7,0,0,0,219,221,5,95,0,0,220,219,1,0,
        0,0,220,221,1,0,0,0,221,222,1,0,0,0,222,224,7,1,0,0,223,220,1,0,
        0,0,224,227,1,0,0,0,225,223,1,0,0,0,225,226,1,0,0,0,226,230,1,0,
        0,0,227,225,1,0,0,0,228,230,5,48,0,0,229,218,1,0,0,0,229,228,1,0,
        0,0,230,20,1,0,0,0,231,235,5,46,0,0,232,234,7,1,0,0,233,232,1,0,
        0,0,234,237,1,0,0,0,235,233,1,0,0,0,235,236,1,0,0,0,236,22,1,0,0,
        0,237,235,1,0,0,0,238,240,7,13,0,0,239,241,3,17,8,0,240,239,1,0,
        0,0,240,241,1,0,0,0,241,243,1,0,0,0,242,244,7,1,0,0,243,242,1,0,
        0,0,244,245,1,0,0,0,245,243,1,0,0,0,245,246,1,0,0,0,246,24,1,0,0,
        0,247,248,5,35,0,0,248,249,5,35,0,0,249,253,1,0,0,0,250,252,9,0,
        0,0,251,250,1,0,0,0,252,255,1,0,0,0,253,254,1,0,0,0,253,251,1,0,
        0,0,254,256,1,0,0,0,255,253,1,0,0,0,256,257,5,35,0,0,257,258,5,35,
        0,0,258,259,1,0,0,0,259,260,6,12,0,0,260,26,1,0,0,0,261,262,5,66,
        0,0,262,263,5,114,0,0,263,264,5,101,0,0,264,265,5,97,0,0,265,266,
        5,107,0,0,266,28,1,0,0,0,267,268,5,67,0,0,268,269,5,111,0,0,269,
        270,5,110,0,0,270,271,5,116,0,0,271,272,5,105,0,0,272,273,5,110,
        0,0,273,274,5,117,0,0,274,275,5,101,0,0,275,30,1,0,0,0,276,277,5,
        73,0,0,277,278,5,102,0,0,278,32,1,0,0,0,279,280,5,69,0,0,280,281,
        5,108,0,0,281,282,5,115,0,0,282,283,5,101,0,0,283,284,5,105,0,0,
        284,285,5,102,0,0,285,34,1,0,0,0,286,287,5,69,0,0,287,288,5,108,
        0,0,288,289,5,115,0,0,289,290,5,101,0,0,290,36,1,0,0,0,291,292,5,
        70,0,0,292,293,5,111,0,0,293,294,5,114,0,0,294,295,5,101,0,0,295,
        296,5,97,0,0,296,297,5,99,0,0,297,298,5,104,0,0,298,38,1,0,0,0,299,
        300,5,84,0,0,300,301,5,114,0,0,301,302,5,117,0,0,302,303,5,101,0,
        0,303,40,1,0,0,0,304,305,5,70,0,0,305,306,5,97,0,0,306,307,5,108,
        0,0,307,308,5,115,0,0,308,309,5,101,0,0,309,42,1,0,0,0,310,311,5,
        86,0,0,311,312,5,97,0,0,312,313,5,114,0,0,313,44,1,0,0,0,314,315,
        5,86,0,0,315,316,5,97,0,0,316,317,5,108,0,0,317,46,1,0,0,0,318,319,
        5,83,0,0,319,320,5,101,0,0,320,321,5,108,0,0,321,322,5,102,0,0,322,
        48,1,0,0,0,323,324,5,82,0,0,324,325,5,101,0,0,325,326,5,116,0,0,
        326,327,5,117,0,0,327,328,5,114,0,0,328,329,5,110,0,0,329,50,1,0,
        0,0,330,331,5,73,0,0,331,332,5,110,0,0,332,52,1,0,0,0,333,334,5,
        66,0,0,334,335,5,121,0,0,335,54,1,0,0,0,336,337,5,78,0,0,337,338,
        5,101,0,0,338,339,5,119,0,0,339,56,1,0,0,0,340,341,5,67,0,0,341,
        342,5,111,0,0,342,343,5,110,0,0,343,344,5,115,0,0,344,345,5,116,
        0,0,345,346,5,114,0,0,346,347,5,117,0,0,347,348,5,99,0,0,348,349,
        5,116,0,0,349,350,5,111,0,0,350,351,5,114,0,0,351,58,1,0,0,0,352,
        353,5,68,0,0,353,354,5,101,0,0,354,355,5,115,0,0,355,356,5,116,0,
        0,356,357,5,114,0,0,357,358,5,117,0,0,358,359,5,99,0,0,359,360,5,
        116,0,0,360,361,5,111,0,0,361,362,5,114,0,0,362,60,1,0,0,0,363,364,
        5,78,0,0,364,365,5,117,0,0,365,366,5,108,0,0,366,367,5,108,0,0,367,
        62,1,0,0,0,368,369,5,67,0,0,369,370,5,108,0,0,370,371,5,97,0,0,371,
        372,5,115,0,0,372,373,5,115,0,0,373,64,1,0,0,0,374,375,5,65,0,0,
        375,376,5,114,0,0,376,377,5,114,0,0,377,378,5,97,0,0,378,379,5,121,
        0,0,379,66,1,0,0,0,380,381,5,73,0,0,381,382,5,110,0,0,382,383,5,
        116,0,0,383,68,1,0,0,0,384,385,5,70,0,0,385,386,5,108,0,0,386,387,
        5,111,0,0,387,388,5,97,0,0,388,389,5,116,0,0,389,70,1,0,0,0,390,
        391,5,66,0,0,391,392,5,111,0,0,392,393,5,111,0,0,393,394,5,108,0,
        0,394,395,5,101,0,0,395,396,5,97,0,0,396,397,5,110,0,0,397,72,1,
        0,0,0,398,399,5,83,0,0,399,400,5,116,0,0,400,401,5,114,0,0,401,402,
        5,105,0,0,402,403,5,110,0,0,403,404,5,103,0,0,404,74,1,0,0,0,405,
        421,5,48,0,0,406,407,5,48,0,0,407,421,5,48,0,0,408,409,5,48,0,0,
        409,410,5,98,0,0,410,421,5,48,0,0,411,412,5,48,0,0,412,413,5,66,
        0,0,413,421,5,48,0,0,414,415,5,48,0,0,415,416,5,120,0,0,416,421,
        5,48,0,0,417,418,5,48,0,0,418,419,5,88,0,0,419,421,5,48,0,0,420,
        405,1,0,0,0,420,406,1,0,0,0,420,408,1,0,0,0,420,411,1,0,0,0,420,
        414,1,0,0,0,420,417,1,0,0,0,421,76,1,0,0,0,422,427,3,1,0,0,423,427,
        3,3,1,0,424,427,3,7,3,0,425,427,3,5,2,0,426,422,1,0,0,0,426,423,
        1,0,0,0,426,424,1,0,0,0,426,425,1,0,0,0,427,428,1,0,0,0,428,429,
        6,38,1,0,429,78,1,0,0,0,430,434,5,34,0,0,431,433,3,9,4,0,432,431,
        1,0,0,0,433,436,1,0,0,0,434,432,1,0,0,0,434,435,1,0,0,0,435,437,
        1,0,0,0,436,434,1,0,0,0,437,438,5,34,0,0,438,439,6,39,2,0,439,80,
        1,0,0,0,440,443,3,39,19,0,441,443,3,41,20,0,442,440,1,0,0,0,442,
        441,1,0,0,0,443,82,1,0,0,0,444,445,3,19,9,0,445,447,3,21,10,0,446,
        448,3,23,11,0,447,446,1,0,0,0,447,448,1,0,0,0,448,456,1,0,0,0,449,
        450,3,19,9,0,450,451,3,23,11,0,451,456,1,0,0,0,452,453,3,21,10,0,
        453,454,3,23,11,0,454,456,1,0,0,0,455,444,1,0,0,0,455,449,1,0,0,
        0,455,452,1,0,0,0,456,457,1,0,0,0,457,458,6,41,3,0,458,84,1,0,0,
        0,459,460,5,43,0,0,460,86,1,0,0,0,461,462,5,45,0,0,462,88,1,0,0,
        0,463,464,5,42,0,0,464,90,1,0,0,0,465,466,5,47,0,0,466,92,1,0,0,
        0,467,468,5,37,0,0,468,94,1,0,0,0,469,470,5,33,0,0,470,96,1,0,0,
        0,471,472,5,38,0,0,472,473,5,38,0,0,473,98,1,0,0,0,474,475,5,124,
        0,0,475,476,5,124,0,0,476,100,1,0,0,0,477,478,5,61,0,0,478,479,5,
        61,0,0,479,102,1,0,0,0,480,481,5,61,0,0,481,104,1,0,0,0,482,483,
        5,33,0,0,483,484,5,61,0,0,484,106,1,0,0,0,485,486,5,60,0,0,486,108,
        1,0,0,0,487,488,5,60,0,0,488,489,5,61,0,0,489,110,1,0,0,0,490,491,
        5,62,0,0,491,112,1,0,0,0,492,493,5,62,0,0,493,494,5,61,0,0,494,114,
        1,0,0,0,495,496,5,61,0,0,496,497,5,61,0,0,497,498,5,46,0,0,498,116,
        1,0,0,0,499,500,5,43,0,0,500,501,5,46,0,0,501,118,1,0,0,0,502,503,
        5,40,0,0,503,120,1,0,0,0,504,505,5,41,0,0,505,122,1,0,0,0,506,507,
        5,91,0,0,507,124,1,0,0,0,508,509,5,93,0,0,509,126,1,0,0,0,510,511,
        5,46,0,0,511,128,1,0,0,0,512,513,5,46,0,0,513,514,5,46,0,0,514,130,
        1,0,0,0,515,516,5,44,0,0,516,132,1,0,0,0,517,518,5,59,0,0,518,134,
        1,0,0,0,519,520,5,58,0,0,520,136,1,0,0,0,521,522,5,58,0,0,522,523,
        5,58,0,0,523,138,1,0,0,0,524,525,5,123,0,0,525,140,1,0,0,0,526,527,
        5,125,0,0,527,142,1,0,0,0,528,532,7,14,0,0,529,531,7,15,0,0,530,
        529,1,0,0,0,531,534,1,0,0,0,532,530,1,0,0,0,532,533,1,0,0,0,533,
        144,1,0,0,0,534,532,1,0,0,0,535,537,5,36,0,0,536,538,7,15,0,0,537,
        536,1,0,0,0,538,539,1,0,0,0,539,537,1,0,0,0,539,540,1,0,0,0,540,
        146,1,0,0,0,541,543,7,16,0,0,542,541,1,0,0,0,543,544,1,0,0,0,544,
        542,1,0,0,0,544,545,1,0,0,0,545,546,1,0,0,0,546,547,6,73,0,0,547,
        148,1,0,0,0,548,552,5,34,0,0,549,551,3,9,4,0,550,549,1,0,0,0,551,
        554,1,0,0,0,552,550,1,0,0,0,552,553,1,0,0,0,553,556,1,0,0,0,554,
        552,1,0,0,0,555,557,7,17,0,0,556,555,1,0,0,0,557,558,1,0,0,0,558,
        559,6,74,4,0,559,150,1,0,0,0,560,564,5,34,0,0,561,563,3,9,4,0,562,
        561,1,0,0,0,563,566,1,0,0,0,564,562,1,0,0,0,564,565,1,0,0,0,565,
        567,1,0,0,0,566,564,1,0,0,0,567,568,3,15,7,0,568,569,6,75,5,0,569,
        152,1,0,0,0,570,571,9,0,0,0,571,572,6,76,6,0,572,154,1,0,0,0,30,
        0,157,162,168,173,180,185,192,197,203,214,220,225,229,235,240,245,
        253,420,426,434,442,447,455,532,539,544,552,556,564,7,6,0,0,1,38,
        0,1,39,1,1,41,2,1,74,3,1,75,4,1,76,5
    ]

class D96Lexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    COMMENT = 1
    BREAK = 2
    CONTINUE = 3
    IF = 4
    ELSEIF = 5
    ELSE = 6
    FOREACH = 7
    VAR = 8
    VAL = 9
    SELF = 10
    RETURN = 11
    IN = 12
    BY = 13
    NEW = 14
    CONSTRUCTOR = 15
    DESTRUCTOR = 16
    NULL = 17
    CLASS = 18
    ARRAY = 19
    INTEGER = 20
    FLOAT = 21
    BOOLEAN = 22
    STRING = 23
    ZERO_INTEGER = 24
    INTEGER_LITERAL = 25
    STRING_LITERAL = 26
    BOOLEAN_LITERAL = 27
    FLOAT_LITERAL = 28
    ADD = 29
    SUB = 30
    MUL = 31
    DIV = 32
    MOD = 33
    NOT = 34
    AND = 35
    OR = 36
    EQUAL = 37
    ASSIGN = 38
    NOT_EQUAL = 39
    LT = 40
    LTE = 41
    GT = 42
    GTE = 43
    STRING_EQUAL = 44
    STRING_ADD = 45
    LP = 46
    RP = 47
    LSB = 48
    RSB = 49
    DOT = 50
    DOUBLE_DOT = 51
    COMMA = 52
    SEMI = 53
    COLON = 54
    DOUBLE_COLON = 55
    LCB = 56
    RCB = 57
    ID = 58
    DOLLAR_ID = 59
    WS = 60
    UNCLOSE_STRING = 61
    ILLEGAL_ESCAPE = 62
    ERROR_TOKEN = 63

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'Break'", "'Continue'", "'If'", "'Elseif'", "'Else'", "'Foreach'", 
            "'Var'", "'Val'", "'Self'", "'Return'", "'In'", "'By'", "'New'", 
            "'Constructor'", "'Destructor'", "'Null'", "'Class'", "'Array'", 
            "'Int'", "'Float'", "'Boolean'", "'String'", "'+'", "'-'", "'*'", 
            "'/'", "'%'", "'!'", "'&&'", "'||'", "'=='", "'='", "'!='", 
            "'<'", "'<='", "'>'", "'>='", "'==.'", "'+.'", "'('", "')'", 
            "'['", "']'", "'.'", "'..'", "','", "';'", "':'", "'::'", "'{'", 
            "'}'" ]

    symbolicNames = [ "<INVALID>",
            "COMMENT", "BREAK", "CONTINUE", "IF", "ELSEIF", "ELSE", "FOREACH", 
            "VAR", "VAL", "SELF", "RETURN", "IN", "BY", "NEW", "CONSTRUCTOR", 
            "DESTRUCTOR", "NULL", "CLASS", "ARRAY", "INTEGER", "FLOAT", 
            "BOOLEAN", "STRING", "ZERO_INTEGER", "INTEGER_LITERAL", "STRING_LITERAL", 
            "BOOLEAN_LITERAL", "FLOAT_LITERAL", "ADD", "SUB", "MUL", "DIV", 
            "MOD", "NOT", "AND", "OR", "EQUAL", "ASSIGN", "NOT_EQUAL", "LT", 
            "LTE", "GT", "GTE", "STRING_EQUAL", "STRING_ADD", "LP", "RP", 
            "LSB", "RSB", "DOT", "DOUBLE_DOT", "COMMA", "SEMI", "COLON", 
            "DOUBLE_COLON", "LCB", "RCB", "ID", "DOLLAR_ID", "WS", "UNCLOSE_STRING", 
            "ILLEGAL_ESCAPE", "ERROR_TOKEN" ]

    ruleNames = [ "DEC_INTEGER_LITERAL", "OCT_INTEGER_LITERAL", "BIN_INTEGER_LITERAL", 
                  "HEX_INTEGER_LITERAL", "STRING_CHAR", "ESCAPE_SEQUENCE", 
                  "DOUBLE_QUOTE_CHAR", "ILLEGAL_SEQUENCE", "SIGN", "FLOAT_INTEGER_PART", 
                  "FLOAT_DECIMAL_PART", "FLOAT_EXPONENT_PART", "COMMENT", 
                  "BREAK", "CONTINUE", "IF", "ELSEIF", "ELSE", "FOREACH", 
                  "TRUE", "FALSE", "VAR", "VAL", "SELF", "RETURN", "IN", 
                  "BY", "NEW", "CONSTRUCTOR", "DESTRUCTOR", "NULL", "CLASS", 
                  "ARRAY", "INTEGER", "FLOAT", "BOOLEAN", "STRING", "ZERO_INTEGER", 
                  "INTEGER_LITERAL", "STRING_LITERAL", "BOOLEAN_LITERAL", 
                  "FLOAT_LITERAL", "ADD", "SUB", "MUL", "DIV", "MOD", "NOT", 
                  "AND", "OR", "EQUAL", "ASSIGN", "NOT_EQUAL", "LT", "LTE", 
                  "GT", "GTE", "STRING_EQUAL", "STRING_ADD", "LP", "RP", 
                  "LSB", "RSB", "DOT", "DOUBLE_DOT", "COMMA", "SEMI", "COLON", 
                  "DOUBLE_COLON", "LCB", "RCB", "ID", "DOLLAR_ID", "WS", 
                  "UNCLOSE_STRING", "ILLEGAL_ESCAPE", "ERROR_TOKEN" ]

    grammarFileName = "D96.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.10.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


    def action(self, localctx:RuleContext, ruleIndex:int, actionIndex:int):
        if self._actions is None:
            actions = dict()
            actions[38] = self.INTEGER_LITERAL_action 
            actions[39] = self.STRING_LITERAL_action 
            actions[41] = self.FLOAT_LITERAL_action 
            actions[74] = self.UNCLOSE_STRING_action 
            actions[75] = self.ILLEGAL_ESCAPE_action 
            actions[76] = self.ERROR_TOKEN_action 
            self._actions = actions
        action = self._actions.get(ruleIndex, None)
        if action is not None:
            action(localctx, actionIndex)
        else:
            raise Exception("No registered action for:" + str(ruleIndex))


    def INTEGER_LITERAL_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 0:

                self.text = self.text.translate(str.maketrans('','','_'))

     

    def STRING_LITERAL_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 1:

            	self.text = self.text[1:-1]

     

    def FLOAT_LITERAL_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 2:

                self.text = self.text.translate(str.maketrans('','','_'))

     

    def UNCLOSE_STRING_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 3:

            	if self.text[-1] in ['\b', '\t', '\f', '\r', '\n', '"']:
            		raise UncloseString(self.text[1:-1])
            	else:
            		raise UncloseString(self.text[1:])

     

    def ILLEGAL_ESCAPE_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 4:

                raise IllegalEscape(self.text[1:])

     

    def ERROR_TOKEN_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 5:

                raise ErrorToken(self.text)

     


